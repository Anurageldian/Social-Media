 //npm installs 
// npm install moment-timezone
 









//orginal photo send command delete rights needed for admin bot 
 /*let write = await bot.downloadFile(msg.photo[msg.photo.length - 1].file_id, `images/${chatId}`);
    await bot.deleteMessage(msg.chat.id, msg.message_id);
    let options = {
      caption: `Please select the following option`,
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{
            text: `Extract Text [ OCR ]`,
            callback_data: `ocr ${write}`
          }],
          [{
            text: `Upload To Url V1 [ Telegraph ]`,
            callback_data: `tourl1 ${write}`
          }],
          [{
            text: `Upload To Url V2 [ Pomf2 ]`,
            callback_data: `tourl2 ${write}`
          }]
        ]
      })
    }
    return bot.sendPhoto(chatId, `${write}`, options)
  } catch (err) {
    return bot.sendMessage(String(process.env.DEV_ID), `Error Image Process: ${err}`);
  }
})
*/



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//utils function
// const os = require('os');

// let startTime = Date.now(); // Capture the start time in milliseconds
// function formatUptime() {
//   let uptimeMilliseconds = Date.now() - startTime; // Calculate uptime in milliseconds
//   let uptimeSeconds = Math.floor(uptimeMilliseconds / 1000); // Convert milliseconds to seconds
//   const days = Math.floor(uptimeSeconds / (3600 * 24));
//   uptimeSeconds %= (3600 * 24);
//   const hours = Math.floor(uptimeSeconds / 3600);
//   uptimeSeconds %= 3600;
//   const minutes = Math.floor(uptimeSeconds / 60);
//   const seconds = uptimeSeconds % 60;
//    const days = Math.floor(uptimeMilliseconds / (1000 * 3600 * 24));
//   uptimeMilliseconds %= (1000 * 3600 * 24);
//   const hours = Math.floor(uptimeMilliseconds / (1000 * 3600));
//   uptimeMilliseconds %= (1000 * 3600);
//   const minutes = Math.floor(uptimeMilliseconds / (1000 * 60));
//   const seconds = Math.floor(uptimeMilliseconds / 1000);
  
//   const uptimeString = `${days}d ${hours}h ${minutes}m ${seconds}s`;
//   return uptimeString;
// }

//system uptime this will show in  /dev command
// function formatSystemUptime() {
//   let uptimeSeconds = os.uptime(); // Get system uptime in seconds

//   const days = Math.floor(uptimeSeconds / (3600 * 24));
//   uptimeSeconds %= (3600 * 24);
//   const hours = Math.floor(uptimeSeconds / 3600);
//   uptimeSeconds %= 3600;
//   const minutes = Math.floor(uptimeSeconds / 60);
//   const seconds = uptimeSeconds % 60;

//   const systemString = `${days}d ${hours}h ${minutes}m ${seconds}s`;
//   return systemString;
// }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  bot.onText(/\/gimage (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const query = match[1];
    try {
      const timestamp = new Date().getTime();
      const imageUrl = `https://api.lolhuman.xyz/api/gimage?apikey=dannlaina&query=${encodeURI(query)}&timestamp=${timestamp}`;
      bot.sendPhoto(chatId, imageUrl);
    } catch (error) {
      console.log(error);
      bot.sendMessage(chatId, 'Maaf, terjadi kesalahan saat memproses permintaan Anda.');
    }
  });

  bot.onText(/^\/gimage$/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, 'Masukan nama foto yang ingin kamu cari, Contoh: /gimage Sazumi Viki');
  });

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// bot.onText(/\/ban (.+)/, (msg, match) => {
//   const chatId = msg.chat.id;
//      bot.banChatMember(msg.chat.id, msg.from.id);
//        bot.sendMessage(chatId, `User ${userId} banned.`);
//   });
// iikkk
//   if (input.startsWith('@')) {
//     // Input is a username
//     const username = input.slice(1);
//     try {
//       const chatMembers = await bot.getChatAdministrators(chatId);
//       const user = chatMembers.find(member => member.user.username === username);
//       if (user) {
//         await banUser(user.user.id);
//       } else {
//         sendMessage(`User @${username} not found.`);
//       }
//     } catch (error) {
//       sendMessage(`Failed to get chat members: ${error.message}`);
//     }
//   } else {
//     // Input is a user ID
//     const userId = parseInt(input, 10);
//     if (isNaN(userId)) {
//       sendMessage(`Invalid user ID: ${input}`);
//     } else {
//       await banUser(userId);
//     }
//   }
// });
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

require('dotenv').config()
const axios = require('axios');
const { parse } = require('spotify-uri');
const util = require('util');
const { getBuffer, filterAlphanumericWithDash } = require('./functions');
const fs = require('fs');

/*
** Endpoints **
https://api.spotifydown.com

* Download Song
/download/

* Metadata Playlist
/metadata/playlist/

* Track Playlist
/trackList/playlist/

*/

async function spotifyScraper(id, endpoint) {
  try {
    let { data } = await axios.get(`https://api.spotifydown.com/${endpoint}/${id}`, {
      headers: {
        'Origin': 'https://spotifydown.com',
        'Referer': 'https://spotifydown.com/',
      }
    })
    return data;
  } catch (err) {
    console.error("Error in spotifyScraper:", err.response ? err.response.data : err.message);
    return null;
  }
}

async function getPlaylistSpotify(bot, chatId, url, userName) {
  let pars = await parse(url);
  let load = await bot.sendMessage(chatId, 'Loading, please wait.');
  try {
    let getdata = await spotifyScraper(`${pars.id}`, 'trackList/playlist');
    if (!getdata) {
      throw new Error("Failed to fetch playlist data");
    }
    let data = [];
    getdata.trackList.map(maru => {
      let title = maru.title || 'Unknown Title';
      let artists = maru.artists || 'Unknown Artists';
      data.push([{ text: `${title} - ${artists}`, callback_data: 'spt ' + maru.id }]);
    });
    let options = {
      caption: 'Please select the music you want to download by pressing one of the buttons below!',
      reply_markup: JSON.stringify({
        inline_keyboard: data
      })
    };
    await bot.sendPhoto(chatId, 'https://telegra.ph/file/a41e47f544ed99dd33783.jpg', options);
    await bot.deleteMessage(chatId, load.message_id);
  } catch (err) {
    await bot.sendMessage(String(process.env.DEV_ID), `[ ERROR MESSAGE ]\n\n• Username: @${userName}\n• File: funcs/spotify.js\n• Function: getPlaylistSpotify()\n• Url: ${url}\n\n${err.message}`.trim());
    return bot.editMessageText('Error getting playlist data!', { chat_id: chatId, message_id: load.message_id });
  }
}

async function getAlbumsSpotify(bot, chatId, url, userName) {
  let pars = await parse(url);
  let load = await bot.sendMessage(chatId, 'Loading, please wait.');
  try {
    let getdata = await spotifyScraper(`${pars.id}`, 'trackList/album');
    if (!getdata) {
      throw new Error("Failed to fetch album data");
    }
    let data = [];
    getdata.trackList.map(maru => {
      let title = maru.title || 'Unknown Title';
      let artists = maru.artists || 'Unknown Artists';
      data.push([{ text: `${title} - ${artists}`, callback_data: 'spt ' + maru.id }]);
    });
    let options = {
      caption: 'Please select the music you want to download by pressing one of the buttons below!',
      reply_markup: JSON.stringify({
        inline_keyboard: data
      })
    };
    await bot.sendPhoto(chatId, 'https://telegra.ph/file/a41e47f544ed99dd33783.jpg', options);
    await bot.deleteMessage(chatId, load.message_id);
  } catch (err) {
    await bot.sendMessage(String(process.env.DEV_ID), `[ ERROR MESSAGE ]\n\n• Username: @${userName}\n• File: funcs/spotify.js\n• Function: getAlbumsSpotify()\n• Url: ${url}\n\n${err.message}`.trim());
    return bot.editMessageText('Error getting album data!', { chat_id: chatId, message_id: load.message_id });
  }
}

async function getSpotifySong(bot, chatId, url, userName) {
  let load = await bot.sendMessage(chatId, 'Loading, please wait.');
  try {
    if (url.includes('spotify.com')) {
      let pars = await parse(url);
      let getdata = await spotifyScraper(pars.id, 'download');
      if (!getdata || !getdata.success) {
        throw new Error("Failed to fetch song data");
      }

      let title = getdata.metadata?.title || 'song';
      let artists = getdata.metadata?.artists || 'unknown';
      let fname = `${filterAlphanumericWithDash(title)}-${filterAlphanumericWithDash(artists)}_${chatId}.mp3`;
      
      await bot.editMessageText(`Downloading song ${title} - ${artists}, please wait...`, { chat_id: chatId, message_id: load.message_id });
      let buff = await getBuffer(getdata.link);
      await fs.writeFileSync('content/'+fname, buff);
      await bot.sendAudio(chatId, 'content/'+fname, { caption: `Success download song ${title} - ${artists}`});
      await bot.deleteMessage(chatId, load.message_id);
      await fs.unlinkSync('content/'+fname);
    } else {
      let getdata = await spotifyScraper(url, 'download');
      if (!getdata || !getdata.success) {
        throw new Error("Failed to fetch song data");
      }

      let title = getdata.metadata?.title || 'song';
      let artists = getdata.metadata?.artists || 'unknown';
      let fname = `${filterAlphanumericWithDash(title)}-${filterAlphanumericWithDash(artists)}_${chatId}.mp3`;

      await bot.editMessageText(`Downloading song ${title} - ${artists}, please wait...`, { chat_id: chatId, message_id: load.message_id });
      let buff = await getBuffer(getdata.link);
      await fs.writeFileSync('content/'+fname, buff);
      await bot.sendAudio(chatId, 'content/'+fname, { caption: `Success download song ${title} - ${artists}`});
      await bot.deleteMessage(chatId, load.message_id);
      await fs.unlinkSync('content/'+fname);
    }
  } catch (err) {
    await bot.sendMessage(String(process.env.DEV_ID), `[ ERROR MESSAGE ]\n\n• Username: @${userName}\n• File: funcs/spotify.js\n• Function: getSpotifySong()\n• Url: ${url}\n\n${err.message}`.trim());
    return bot.editMessageText('Failed to download song!', { chat_id: chatId, message_id: load.message_id });
  }
}

module.exports = {
  getPlaylistSpotify,
  getAlbumsSpotify,
  getSpotifySong
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
