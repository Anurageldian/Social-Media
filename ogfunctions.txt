~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

const fs = require('fs');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');

const serviceSettingsPath = path.join(__dirname, 'serviceSettings.json');
let serviceSettings = [];

// Load settings from JSON file
if (fs.existsSync(serviceSettingsPath)) {
  serviceSettings = JSON.parse(fs.readFileSync(serviceSettingsPath, 'utf8'));
}

// Helper function to save settings
function saveSettings() {
  fs.writeFileSync(serviceSettingsPath, JSON.stringify(serviceSettings, null, 2));
}

// Helper function to get the group service setting
function getGroupSetting(groupId) {
  return serviceSettings.find(item => item.groupid === groupId);
}

const allowedServices = ['all', 'join', 'leave', 'pin', 'title', 'videochat'];

// Command to add services to a group
bot.onText(/\/cleanservice ?(.*)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const services = match[1].trim() ? match[1].trim().split(',').map(service => service.trim()) : [];

  // Check if user is an admin
  const user = await bot.getChatMember(chatId, userId);
  if (user.status !== 'administrator' && user.status !== 'creator') {
    return bot.sendMessage(chatId, 'Only admins can use this command.');
  }

  // If no service specified, list the current active services
  if (services.length === 0) {
    const groupSetting = getGroupSetting(chatId);
    const activeServices = groupSetting ? groupSetting.services.join(', ') : 'No services enabled';
    return bot.sendMessage(chatId, `Active services in this chat: ${activeServices}`);
  }

  // Validate services
  for (const service of services) {
    if (!allowedServices.includes(service)) {
      return bot.sendMessage(chatId, `Invalid service: "${service}". Please use one of the following: ${allowedServices.join(', ')}`);
    }
  }

  // Get or create group service settings
  let groupSetting = getGroupSetting(chatId);
  if (!groupSetting) {
    groupSetting = { groupid: chatId, services: [] };
    serviceSettings.push(groupSetting);
  }

  // Add services to the group
  services.forEach(service => {
    if (!groupSetting.services.includes(service)) {
      groupSetting.services.push(service);
    }
  });

  saveSettings();
  bot.sendMessage(chatId, `Added services: ${services.join(', ')} to this group.`);
});

// Command to remove services from a group
bot.onText(/\/removeservice ?(.*)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const services = match[1].trim() ? match[1].trim().split(',').map(service => service.trim()) : [];

  // Check if user is an admin
  const user = await bot.getChatMember(chatId, userId);
  if (user.status !== 'administrator' && user.status !== 'creator') {
    return bot.sendMessage(chatId, 'Only admins can use this command.');
  }

  // If no service specified, list the current active services
  if (services.length === 0) {
    const groupSetting = getGroupSetting(chatId);
    const activeServices = groupSetting ? groupSetting.services.join(', ') : 'No services enabled';
    return bot.sendMessage(chatId, `Active services in this chat: ${activeServices}`);
  }

  // Validate services
  for (const service of services) {
    if (!allowedServices.includes(service)) {
      return bot.sendMessage(chatId, `Invalid service: "${service}". Please use one of the following: ${allowedServices.join(', ')}`);
    }
  }

  // Get group service settings
  let groupSetting = getGroupSetting(chatId);
  if (!groupSetting) {
    return bot.sendMessage(chatId, 'No services are set for this group.');
  }

  // Remove services from the group
  services.forEach(service => {
    const index = groupSetting.services.indexOf(service);
    if (index !== -1) {
      groupSetting.services.splice(index, 1);
    }
  });

  saveSettings();
  bot.sendMessage(chatId, `Removed services: ${services.join(', ')} from this group.`);
});

// Monitor and delete service messages based on settings
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const groupSetting = getGroupSetting(chatId);

  if (!groupSetting || groupSetting.services.includes('off')) return;

  // Conditions for each service message type
  const isJoinMessage = msg.new_chat_members;
  const isLeaveMessage = msg.left_chat_member;
  const isPinnedMessage = msg.pinned_message;
  const isTitleChange = msg.group_chat_created || msg.supergroup_chat_created || msg.migrate_to_chat_id || msg.migrate_from_chat_id;
  const isVideoChatMessage = msg.video_chat_started || msg.video_chat_ended || msg.video_chat_scheduled || msg.video_chat_participants_invited;

  // Check if it's a service message and delete it
  try {
    // Only delete service messages that match the group setting
    groupSetting.services.forEach(service => {
      if (
        service === 'all' ||
        (service === 'join' && isJoinMessage) ||
        (service === 'leave' && isLeaveMessage) ||
        (service === 'pin' && isPinnedMessage) ||
        (service === 'title' && isTitleChange) ||
        (service === 'videochat' && isVideoChatMessage)
      ) {
        // Ensure it's not a regular user-uploaded photo message
        if (!msg.photo) {
          bot.deleteMessage(chatId, msg.message_id);
        }
      }
    });
  } catch (error) {
    console.error('Error deleting service message:', error);
  }
});

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
clean service og functions

const serviceSettingsPath = path.join(__dirname, 'serviceSettings.json');
// Load settings from JSON file
let serviceSettings = [];
if (fs.existsSync(serviceSettingsPath)) {
  serviceSettings = JSON.parse(fs.readFileSync(serviceSettingsPath, 'utf8'));
}

// Helper function to save settings
function saveSettings() {
  fs.writeFileSync(serviceSettingsPath, JSON.stringify(serviceSettings, null, 2));
}

// Helper function to get the group service setting
function getGroupSetting(groupId) {
  return serviceSettings.find(item => item.groupid === groupId);
}

// Command to add services to a group
bot.onText(/\/cleanservice (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const services = match[1].trim().split(',').map(service => service.trim());

  const allowedServices = ['all', 'join', 'leave', 'pin', 'title', 'videochat'];

  // Check if user is an admin
  const user = await bot.getChatMember(chatId, userId);
  if (user.status !== 'administrator' && user.status !== 'creator') {
    return bot.sendMessage(chatId, 'Only admins can use this command.');
  }

  // Validate services
  for (const service of services) {
    if (!allowedServices.includes(service)) {
      return bot.sendMessage(chatId, `Invalid service: "${service}". Please use one of the following: ${allowedServices.join(', ')}`);
    }
  }

  // Get or create group service settings
  let groupSetting = getGroupSetting(chatId);
  if (!groupSetting) {
    groupSetting = { groupid: chatId, services: [] };
    serviceSettings.push(groupSetting);
  }

  // Add services to the group
  services.forEach(service => {
    if (!groupSetting.services.includes(service)) {
      groupSetting.services.push(service);
    }
  });

  saveSettings();
  bot.sendMessage(chatId, `Added services: ${services.join(', ')} to this group.`);
});

// Command to remove services from a group
bot.onText(/\/removeservice (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const services = match[1].trim().split(',').map(service => service.trim());

  const allowedServices = ['all', 'join', 'leave', 'pin', 'title', 'videochat'];

  // Check if user is an admin
  const user = await bot.getChatMember(chatId, userId);
  if (user.status !== 'administrator' && user.status !== 'creator') {
    return bot.sendMessage(chatId, 'Only admins can use this command.');
  }

  // Validate services
  for (const service of services) {
    if (!allowedServices.includes(service)) {
      return bot.sendMessage(chatId, `Invalid service: "${service}". Please use one of the following: ${allowedServices.join(', ')}`);
    }
  }

  // Get group service settings
  let groupSetting = getGroupSetting(chatId);
  if (!groupSetting) {
    return bot.sendMessage(chatId, 'No services are set for this group.');
  }

  // Remove services from the group
  services.forEach(service => {
    const index = groupSetting.services.indexOf(service);
    if (index !== -1) {
      groupSetting.services.splice(index, 1);
    }
  });

  saveSettings();
  bot.sendMessage(chatId, `Removed services: ${services.join(', ')} from this group.`);
});

// Monitor and delete service messages based on settings
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const groupSetting = getGroupSetting(chatId);

  if (!groupSetting || groupSetting.services.includes('off')) return;

  // Conditions for each service message type
  const isJoinMessage = msg.new_chat_members;
  const isLeaveMessage = msg.left_chat_member;
  const isPinnedMessage = msg.pinned_message;
  const isTitleChange = msg.group_chat_created || msg.supergroup_chat_created || msg.migrate_to_chat_id || msg.migrate_from_chat_id;
  const isVideoChatMessage = msg.video_chat_started || msg.video_chat_ended || msg.video_chat_scheduled || msg.video_chat_participants_invited;

  // Check if it's a service message and delete it
  try {
    // Only delete service messages that match the group setting
    groupSetting.services.forEach(service => {
      if (
        service === 'all' ||
        (service === 'join' && isJoinMessage) ||
        (service === 'leave' && isLeaveMessage) ||
        (service === 'pin' && isPinnedMessage) ||
        (service === 'title' && isTitleChange) ||
        (service === 'videochat' && isVideoChatMessage)
      ) {
        // Ensure it's not a regular user-uploaded photo message
        if (!msg.photo) {
          bot.deleteMessage(chatId, msg.message_id);
        }
      }
    });
  } catch (error) {
    console.error('Error deleting service message:', error);
  }
});



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

async function getYoutube(bot, chatId, url, userName) {
  let load = await bot.sendMessage(chatId, 'Loading, please wait.');
  let data = [];
  try {
    if (url.includes('music.youtube.com')) {
      let newUrl = url.replace('music.youtube.com', 'www.youtube.com');
      let get = await client.getFromURL(newUrl, 'vi');
      let getsize = get.linksAudio.get('mp3128' ? 'mp3128' : '140').size
      let size = Math.floor(getsize.replace(' MB', ''))
      if (size > 49) {
        return bot.editMessageText('The file size is more than 50 MB, bots can only download under 50 MB.', { chat_id: chatId, message_id: load.message_id })
      }
      let fname = filterAlphanumericWithDash(get.title) + '.mp3';
      let get2 = await get.linksAudio.get('mp3128' ? 'mp3128' : '140').fetch();
      await bot.editMessageText(`Downloading music ${get.title}, please wait.`, { chat_id: chatId, message_id: load.message_id })
      let buff = await getBuffer(get2.downloadLink);
      await fs.writeFileSync('content/'+fname, buff);
      await bot.sendAudio(chatId, 'content/'+fname, { caption: 'Successful music download ' + get.title })
      await bot.sendAudio(logChannelId, 'content/'+fname, { caption: 'Successful music download ' + get.title })
      await bot.deleteMessage(chatId, load.message_id);
      await fs.unlinkSync('content/'+fname)
    } else {
      let data = [];
      let get = await client.getFromURL(url, 'vi');
      for (let [ind, args] of get.linksVideo) {
        let title = htmlToText(args.name);
        data.push([{ text: `Video ${title}${args.size ? ' - ' + args.size : ''}`, callback_data: `ytv ${get.videoId} ${ind}`}])
      }
      for (let [ind, args] of get.linksAudio) {
        let title = htmlToText(args.name);
        data.push([{ text: `Audio ${title}${args.size ? ' - ' + args.size : ''}`, callback_data: `yta ${get.videoId} ${ind}`}])
      }
      let options = {
        caption: `${get.title}\n\nPlease select the following option!`,
        reply_markup: JSON.stringify({
          inline_keyboard: data
        })
      }
      await bot.sendPhoto(chatId, `https://i.ytimg.com/vi/${get.videoId}/0.jpg`, options)
      await bot.deleteMessage(chatId, load.message_id);
    }
  } catch (err) {
    await bot.sendMessage(logChannelId, `[ ERROR MESSAGE ]\n\n• Username: @${userName}\n• File: funcs/youtube.js\n• Function: getYoutube()\n• Url: ${url}\n\n${err}`.trim());
    return bot.editMessageText('An error occurred, make sure your YouTube link is valid!', { chat_id: chatId, message_id: load.message_id })
  }
}

async function getYoutubeVideo(bot, chatId, id, ind, userName) {
  let load = await bot.sendMessage(chatId, 'Loading, please wait.')
  try {
    let get = await client.getFromURL('https://www.youtube.com/'+id, 'vi');
    let res = await get.linksVideo.get(ind).fetch();
    let getsize = get.linksVideo.get(ind).size;
    let size = Math.floor(getsize.replace(' MB', ''));
    if (size > 49) {
      return bot.editMessageText('file size is more than 50mb, the bot can only download files under 50mb, please download it in your browser using the following link\n\n' + res.downloadLink, { chat_id: chatId, message_id: load.message_id, disable_web_page_preview: true })
    }
    let fname = filterAlphanumericWithDash(res.title) + '.mp4';
    await bot.editMessageText('Loading, downloading video ' + get.title, { chat_id: chatId, message_id: load.message_id });
    let buff = await getBuffer(res.downloadLink);
    await fs.writeFileSync('content/'+fname, buff);
    await bot.sendVideo(chatId, 'content/'+fname, { caption: res.title });
    await bot.sendVideo(logChannelId, 'content/'+fname, { caption: res.title });
    await bot.deleteMessage(chatId, load.message_id);
    await fs.unlinkSync('content/'+fname);
  } catch (err) {
    await bot.sendMessage(String(process.env.DEV_ID), `[ ERROR MESSAGE ]\n\n• Username: @${userName}\n• File: funcs/youtube.js\n• Function: getYoutubeVideo()\n• Url: https://www.youtube.com/${id}\n\n${err}`.trim());
    return bot.editMessageText('An error occurred, failed to download video!', { chat_id: chatId, message_id: load.message_id })
  }
}

async function getYoutubeAudio(bot, chatId, id, ind, userName) {
  let load = await bot.sendMessage(chatId, 'Loading, please wait.')
  try {
    let get = await client.getFromURL('https://www.youtube.com/'+id, 'vi');
    let res = await get.linksAudio.get(ind).fetch();
    let getsize = get.linksAudio.get(ind).size;
    let size = Math.floor(getsize.replace(' MB', ''));
    if (size > 49) {
      return bot.editMessageText('file size is more than 50mb, the bot can only download files under 50mb, please download it in your browser using the following link\n\n' + res.downloadLink, { chat_id: chatId, message_id: load.message_id, disable_web_page_preview: true })
    }
    let fname = filterAlphanumericWithDash(res.title) + '.mp3';
    await bot.editMessageText('Loading, downloading audio ' + get.title, { chat_id: chatId, message_id: load.message_id });
    let buff = await getBuffer(res.downloadLink);
    await fs.writeFileSync('content/'+fname, buff);
    await bot.sendAudio(chatId, 'content/'+fname, { caption: res.title });
    await bot.sendAudio(logChannelId, 'content/'+fname, { caption: res.title });
    await bot.deleteMessage(chatId, load.message_id);
    await fs.unlinkSync('content/'+fname);
  } catch (err) {
    await bot.sendMessage(logChannelId, `[ ERROR MESSAGE ]\n\n• Username: @${userName}\n• File: funcs/youtube.js\n• Function: getYoutubeAudio()\n• Url: https://www.youtube.com/${id}\n\n${err}`.trim());
    return bot.editMessageText('An error occurred, failed to download audio!', { chat_id: chatId, message_id: load.message_id })
  }
}


module.exports = {
  getYoutube,
  getYoutubeVideo,
  getYoutubeAudio
}




 //npm installs 
// npm install moment-timezone
pinterest.js

require('dotenv').config();
const axios = require('axios');
const cheerio = require('cheerio');
const util = require('util');
const logChannelId = process.env.LOGC_ID;

async function pindl(url) {
  try {
    const { data } = await axios.get(url, {
      headers: {
        "user-agent": "Mozilla/5.0 (Linux; U; Android 12; in; SM-A015F Build/SP1A.210812.016.A015FXXS5CWB2) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/110.0.0.0 Mobile Safari/537.36",
      },
    });

    const $ = cheerio.load(data);

    // Collect all script tags and search for media URLs
    const scriptTags = $('script').toArray();
    let mediaUrls = new Set(); // Use a set to avoid duplicates

    scriptTags.forEach((script) => {
      const content = $(script).html();
      if (content) {
        // Use a regex to find image URLs or video URLs
        const imageRegex = /"(https:\/\/i\.pinimg\.com\/originals\/[^"]+)"/g;
        const videoRegex = /"(https:\/\/v\.pinimg\.com\/videos\/[^"]+)"/g;
        let match;

        // Extract images
        while ((match = imageRegex.exec(content)) !== null) {
          mediaUrls.add(match[1]);
        }

        // Extract videos
        while ((match = videoRegex.exec(content)) !== null) {
          mediaUrls.add(match[1]);
        }
      }
    });

    // Convert the set back to an array
    mediaUrls = Array.from(mediaUrls);

    if (mediaUrls.length > 0) {
      return mediaUrls;
    } else {
      return ["Error: No media found!"];
    }
  } catch (err) {
    return ["Error: Invalid URL!"];
  }
}




async function pinSearch(bot, chatId, query, userName) {
  if (!query) return bot.sendMessage(chatId, 'What images are you looking for on Pinterest? example\n/pin anime');
  let load = await bot.sendMessage(chatId, 'Loading, please wait');
  try {
    let get = await axios.get(`https://www.pinterest.com/resource/BaseSearchResource/get/?source_url=/search/pins/?q=${query}&data={"options":{"isPrefetch":false,"query":"${query}","scope":"pins","no_fetch_context_on_resource":false},"context":{}}`)
    let json = await get.data;
		let data = json.resource_response.data.results;
		if (!data.length) return bot.editMessageText(`Query "${query}" not found!`, { chat_id: chatId, message_id: load.message_id });
		await bot.sendPhoto(chatId, data[~~(Math.random() * (data.length))].images.orig.url, { caption: `Bot by @firespower` });
		await bot.sendPhoto(logChannelId, data[~~(Math.random() * (data.length))].images.orig.url, { caption: `Bot by @firespower` });
		return bot.deleteMessage(chatId, load.message_id);
  } catch (err) {
    await bot.sendMessage(logChannelId, `[ ERROR MESSAGE ]\n\n• Username: @${userName}\n• File: funcs/pinterest.js\n• Function: pinSearch()\n• Query: ${query}\n\n${err}`.trim());
    return bot.editMessageText('An error occurred!', { chat_id: chatId, message_id: load.message_id }) 
  }
}

async function pinterest(bot, chatId, url, userName) {
  let load = await bot.sendMessage(chatId, 'Loading.');
  
  try {
    let mediaUrls = await pindl(url);
    
    if (!mediaUrls || mediaUrls[0].startsWith("Error")) {
      return bot.editMessageText('Failed to get data, make sure your Pinterest link is valid!', { chat_id: chatId, message_id: load.message_id });
    } else {
      for (let mediaUrl of mediaUrls) {
        if (mediaUrl.endsWith('.mp4')) {
          await bot.sendVideo(chatId, mediaUrl, { caption: `Bot by @firespower` });
          await bot.sendVideo(logChannelId, mediaUrl, { caption: `Bot by @firespower` });
        } else if (mediaUrl.endsWith('.gif')) {
          await bot.sendAnimation(chatId, mediaUrl, { caption: `Bot by @firespower` });
          await bot.sendAnimation(logChannelId, mediaUrl, { caption: `Bot by @firespower` });
        } else {
          await bot.sendPhoto(chatId, mediaUrl, { caption: `Bot by @firespower` });
          await bot.sendPhoto(logChannelId, mediaUrl, { caption: `Bot by @firespower` });
        }
      }
      return bot.deleteMessage(chatId, load.message_id);
    }
  } catch (err) {
    await bot.sendMessage(logChannelId, `[ ERROR MESSAGE ]\n\n• Username: @${userName}\n• File: funcs/pinterest.js\n• Function: pinterest()\n• Url: ${url}\n\n${err}`.trim());
    return bot.editMessageText('Failed to download media, make sure your link is valid!', { chat_id: chatId, message_id: load.message_id });
  }
}

module.exports = {
  pinterest,
  pinSearch
}

require('dotenv').config();
const axios = require('axios');
const cheerio = require('cheerio');
const util = require('util');
const logChannelId = process.env.LOGC_ID;

async function pindl(url) {
  try {
    const { data } = await axios.get(url, { headers: {
				"user-agent": "Mozilla/5.0 (Linux; U; Android 12; in; SM-A015F Build/SP1A.210812.016.A015FXXS5CWB2) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/110.0.0.0 Mobile Safari/537.36"
			}});
    const $ = cheerio.load(data);
    const scriptTag = $('script[data-test-id="video-snippet"]').html() || $('script[data-test-id="leaf-snippet"]').html();
    if (scriptTag) {
        const jsonData = JSON.parse(scriptTag);
        const resultt = jsonData.contentUrl || jsonData.image;
        return resultt
    } else {
      result = "Error: Invalid URL!"
      return result;
    }
  } catch (err) {
    result = "Error: Invalid URL!"
    return result;
  }
}

async function pinSearch(bot, chatId, query, userName) {
  if (!query) return bot.sendMessage(chatId, 'What images are you looking for on Pinterest? example\n/pin anime');
  let load = await bot.sendMessage(chatId, 'Loading, please wait');
  try {
    let get = await axios.get(`https://www.pinterest.com/resource/BaseSearchResource/get/?source_url=/search/pins/?q=${query}&data={"options":{"isPrefetch":false,"query":"${query}","scope":"pins","no_fetch_context_on_resource":false},"context":{}}`)
    let json = await get.data;
		let data = json.resource_response.data.results;
		if (!data.length) return bot.editMessageText(`Query "${query}" not found!`, { chat_id: chatId, message_id: load.message_id });
		await bot.sendPhoto(chatId, data[~~(Math.random() * (data.length))].images.orig.url, { caption: `Bot by @firespower` });
		await bot.sendPhoto(logChannelId, data[~~(Math.random() * (data.length))].images.orig.url, { caption: `Bot by @firespower` });
		return bot.deleteMessage(chatId, load.message_id);
  } catch (err) {
    await bot.sendMessage(logChannelId, `[ ERROR MESSAGE ]\n\n• Username: @${userName}\n• File: funcs/pinterest.js\n• Function: pinSearch()\n• Query: ${query}\n\n${err}`.trim());
    return bot.editMessageText('An error occurred!', { chat_id: chatId, message_id: load.message_id }) 
  }
}

async function pinterest(bot, chatId, url, userName) {
  let load = await bot.sendMessage(chatId, 'Loading.')
  try {
    let get = await pindl(url);
    if (!get) {
      return bot.editMessageText('Failed to get data, make sure your Pinterest link is valid!', { chat_id: chatId, message_id: load.message_id })
    } else {
      if (get.endsWith('.mp4')) {
        await bot.sendVideo(chatId, get, { caption: `Bot by @firespower` })
        await bot.sendVideo(logChannelId, get, { caption: `Bot by @firespower` })
        return bot.deleteMessage(chatId, load.message_id);
      } else if (get.endsWith('.gif')) {
        await bot.sendAnimation(chatId, get, { caption: `Bot by @firespower` })
	await bot.sendAnimation(logChannelId, get, { caption: `Bot by @firespower` })
        return bot.deleteMessage(chatId, load.message_id);
      } else {
        await bot.sendPhoto(chatId, get, { caption: `Bot by @firespower` })
	await bot.sendPhoto(logChannelId, get, { caption: `Bot by @firespower` })
        return bot.deleteMessage(chatId, load.message_id);
      }
    }
  } catch (err) {
    await bot.sendMessage(logChannelId, `[ ERROR MESSAGE ]\n\n• Username: @${userName}\n• File: funcs/pinterest.js\n• Function: pinterest()\n• Url: ${url}\n\n${err}`.trim());
    return bot.editMessageText('Failed to download media, make sure your link is valid!', { chat_id: chatId, message_id: load.message_id })
  }
}
module.exports = {
  pinterest,
  pinSearch
}






facebook.js~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

async function getUpdates(token) {
  try {
    const response = await axios.get(`https://api.telegram.org/bot${token}/getUpdates`);
    return response.data.result;
  } catch (error) {
    console.error('Error getting updates:', error);
    return [];
  }
}

async function allUpdates() {
  const updates = await getUpdates(token);
  console.log('Updates:', JSON.stringify(updates, null, 2));
}

allUpdates();


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




//orginal photo send command delete rights needed for admin bot 
 /*let write = await bot.downloadFile(msg.photo[msg.photo.length - 1].file_id, `images/${chatId}`);
    await bot.deleteMessage(msg.chat.id, msg.message_id);
    let options = {
      caption: `Please select the following option`,
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{
            text: `Extract Text [ OCR ]`,
            callback_data: `ocr ${write}`
          }],
          [{
            text: `Upload To Url V1 [ Telegraph ]`,
            callback_data: `tourl1 ${write}`
          }],
          [{
            text: `Upload To Url V2 [ Pomf2 ]`,
            callback_data: `tourl2 ${write}`
          }]
        ]
      })
    }
    return bot.sendPhoto(chatId, `${write}`, options)
  } catch (err) {
    return bot.sendMessage(String(process.env.DEV_ID), `Error Image Process: ${err}`);
  }
})
*/



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//utils function
// const os = require('os');

// let startTime = Date.now(); // Capture the start time in milliseconds
// function formatUptime() {
//   let uptimeMilliseconds = Date.now() - startTime; // Calculate uptime in milliseconds
//   let uptimeSeconds = Math.floor(uptimeMilliseconds / 1000); // Convert milliseconds to seconds
//   const days = Math.floor(uptimeSeconds / (3600 * 24));
//   uptimeSeconds %= (3600 * 24);
//   const hours = Math.floor(uptimeSeconds / 3600);
//   uptimeSeconds %= 3600;
//   const minutes = Math.floor(uptimeSeconds / 60);
//   const seconds = uptimeSeconds % 60;
//    const days = Math.floor(uptimeMilliseconds / (1000 * 3600 * 24));
//   uptimeMilliseconds %= (1000 * 3600 * 24);
//   const hours = Math.floor(uptimeMilliseconds / (1000 * 3600));
//   uptimeMilliseconds %= (1000 * 3600);
//   const minutes = Math.floor(uptimeMilliseconds / (1000 * 60));
//   const seconds = Math.floor(uptimeMilliseconds / 1000);
  
//   const uptimeString = `${days}d ${hours}h ${minutes}m ${seconds}s`;
//   return uptimeString;
// }

//system uptime this will show in  /dev command
// function formatSystemUptime() {
//   let uptimeSeconds = os.uptime(); // Get system uptime in seconds

//   const days = Math.floor(uptimeSeconds / (3600 * 24));
//   uptimeSeconds %= (3600 * 24);
//   const hours = Math.floor(uptimeSeconds / 3600);
//   uptimeSeconds %= 3600;
//   const minutes = Math.floor(uptimeSeconds / 60);
//   const seconds = uptimeSeconds % 60;

//   const systemString = `${days}d ${hours}h ${minutes}m ${seconds}s`;
//   return systemString;
// }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  bot.onText(/\/gimage (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const query = match[1];
    try {
      const timestamp = new Date().getTime();
      const imageUrl = `https://api.lolhuman.xyz/api/gimage?apikey=dannlaina&query=${encodeURI(query)}&timestamp=${timestamp}`;
      bot.sendPhoto(chatId, imageUrl);
    } catch (error) {
      console.log(error);
      bot.sendMessage(chatId, 'Maaf, terjadi kesalahan saat memproses permintaan Anda.');
    }
  });

  bot.onText(/^\/gimage$/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, 'Masukan nama foto yang ingin kamu cari, Contoh: /gimage Sazumi Viki');
  });

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// bot.onText(/\/ban (.+)/, (msg, match) => {
//   const chatId = msg.chat.id;
//      bot.banChatMember(msg.chat.id, msg.from.id);
//        bot.sendMessage(chatId, `User ${userId} banned.`);
//   });
// iikkk
//   if (input.startsWith('@')) {
//     // Input is a username
//     const username = input.slice(1);
//     try {
//       const chatMembers = await bot.getChatAdministrators(chatId);
//       const user = chatMembers.find(member => member.user.username === username);
//       if (user) {
//         await banUser(user.user.id);
//       } else {
//         sendMessage(`User @${username} not found.`);
//       }
//     } catch (error) {
//       sendMessage(`Failed to get chat members: ${error.message}`);
//     }
//   } else {
//     // Input is a user ID
//     const userId = parseInt(input, 10);
//     if (isNaN(userId)) {
//       sendMessage(`Invalid user ID: ${input}`);
//     } else {
//       await banUser(userId);
//     }
//   }
// });
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

require('dotenv').config()
const axios = require('axios');
const { parse } = require('spotify-uri');
const util = require('util');
const { getBuffer, filterAlphanumericWithDash } = require('./functions');
const fs = require('fs');

/*
** Endpoints **
https://api.spotifydown.com

* Download Song
/download/

* Metadata Playlist
/metadata/playlist/

* Track Playlist
/trackList/playlist/

*/

async function spotifyScraper(id, endpoint) {
  try {
    let { data } = await axios.get(`https://api.spotifydown.com/${endpoint}/${id}`, {
      headers: {
        'Origin': 'https://spotifydown.com',
        'Referer': 'https://spotifydown.com/',
      }
    })
    return data;
  } catch (err) {
    console.error("Error in spotifyScraper:", err.response ? err.response.data : err.message);
    return null;
  }
}

async function getPlaylistSpotify(bot, chatId, url, userName) {
  let pars = await parse(url);
  let load = await bot.sendMessage(chatId, 'Loading, please wait.');
  try {
    let getdata = await spotifyScraper(`${pars.id}`, 'trackList/playlist');
    if (!getdata) {
      throw new Error("Failed to fetch playlist data");
    }
    let data = [];
    getdata.trackList.map(maru => {
      let title = maru.title || 'Unknown Title';
      let artists = maru.artists || 'Unknown Artists';
      data.push([{ text: `${title} - ${artists}`, callback_data: 'spt ' + maru.id }]);
    });
    let options = {
      caption: 'Please select the music you want to download by pressing one of the buttons below!',
      reply_markup: JSON.stringify({
        inline_keyboard: data
      })
    };
    await bot.sendPhoto(chatId, 'https://telegra.ph/file/a41e47f544ed99dd33783.jpg', options);
    await bot.deleteMessage(chatId, load.message_id);
  } catch (err) {
    await bot.sendMessage(String(process.env.DEV_ID), `[ ERROR MESSAGE ]\n\n• Username: @${userName}\n• File: funcs/spotify.js\n• Function: getPlaylistSpotify()\n• Url: ${url}\n\n${err.message}`.trim());
    return bot.editMessageText('Error getting playlist data!', { chat_id: chatId, message_id: load.message_id });
  }
}

async function getAlbumsSpotify(bot, chatId, url, userName) {
  let pars = await parse(url);
  let load = await bot.sendMessage(chatId, 'Loading, please wait.');
  try {
    let getdata = await spotifyScraper(`${pars.id}`, 'trackList/album');
    if (!getdata) {
      throw new Error("Failed to fetch album data");
    }
    let data = [];
    getdata.trackList.map(maru => {
      let title = maru.title || 'Unknown Title';
      let artists = maru.artists || 'Unknown Artists';
      data.push([{ text: `${title} - ${artists}`, callback_data: 'spt ' + maru.id }]);
    });
    let options = {
      caption: 'Please select the music you want to download by pressing one of the buttons below!',
      reply_markup: JSON.stringify({
        inline_keyboard: data
      })
    };
    await bot.sendPhoto(chatId, 'https://telegra.ph/file/a41e47f544ed99dd33783.jpg', options);
    await bot.deleteMessage(chatId, load.message_id);
  } catch (err) {
    await bot.sendMessage(String(process.env.DEV_ID), `[ ERROR MESSAGE ]\n\n• Username: @${userName}\n• File: funcs/spotify.js\n• Function: getAlbumsSpotify()\n• Url: ${url}\n\n${err.message}`.trim());
    return bot.editMessageText('Error getting album data!', { chat_id: chatId, message_id: load.message_id });
  }
}

async function getSpotifySong(bot, chatId, url, userName) {
  let load = await bot.sendMessage(chatId, 'Loading, please wait.');
  try {
    if (url.includes('spotify.com')) {
      let pars = await parse(url);
      let getdata = await spotifyScraper(pars.id, 'download');
      if (!getdata || !getdata.success) {
        throw new Error("Failed to fetch song data");
      }

      let title = getdata.metadata?.title || 'song';
      let artists = getdata.metadata?.artists || 'unknown';
      let fname = `${filterAlphanumericWithDash(title)}-${filterAlphanumericWithDash(artists)}_${chatId}.mp3`;
      
      await bot.editMessageText(`Downloading song ${title} - ${artists}, please wait...`, { chat_id: chatId, message_id: load.message_id });
      let buff = await getBuffer(getdata.link);
      await fs.writeFileSync('content/'+fname, buff);
      await bot.sendAudio(chatId, 'content/'+fname, { caption: `Success download song ${title} - ${artists}`});
      await bot.deleteMessage(chatId, load.message_id);
      await fs.unlinkSync('content/'+fname);
    } else {
      let getdata = await spotifyScraper(url, 'download');
      if (!getdata || !getdata.success) {
        throw new Error("Failed to fetch song data");
      }

      let title = getdata.metadata?.title || 'song';
      let artists = getdata.metadata?.artists || 'unknown';
      let fname = `${filterAlphanumericWithDash(title)}-${filterAlphanumericWithDash(artists)}_${chatId}.mp3`;

      await bot.editMessageText(`Downloading song ${title} - ${artists}, please wait...`, { chat_id: chatId, message_id: load.message_id });
      let buff = await getBuffer(getdata.link);
      await fs.writeFileSync('content/'+fname, buff);
      await bot.sendAudio(chatId, 'content/'+fname, { caption: `Success download song ${title} - ${artists}`});
      await bot.deleteMessage(chatId, load.message_id);
      await fs.unlinkSync('content/'+fname);
    }
  } catch (err) {
    await bot.sendMessage(String(process.env.DEV_ID), `[ ERROR MESSAGE ]\n\n• Username: @${userName}\n• File: funcs/spotify.js\n• Function: getSpotifySong()\n• Url: ${url}\n\n${err.message}`.trim());
    return bot.editMessageText('Failed to download song!', { chat_id: chatId, message_id: load.message_id });
  }
}

module.exports = {
  getPlaylistSpotify,
  getAlbumsSpotify,
  getSpotifySong
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//line 822

// bot.onText(/\/promote (.+)/, async (msg, match) => {
//   const chatId = msg.chat.id;
//   const userIdOrUsernameToPromote = match[1].trim();
//   const issuerId = msg.from.id;

//   try {
//     // Check if the command issuer is an admin with the "can_promote_members" permission
//      const issuer = await bot.getChatMember(chatId, issuerId);
//     if (issuer.status !== 'administrator' && !issuer.can_promote_members) {
//       bot.sendMessage(chatId, 'You need the "can promote members" permission to promote users.');
//       return;
//     }
// let userIdToPromote;
//     let userToPromote;

//     if (msg.reply_to_message) {
//       // If the command is in reply to a message, ban the user who sent the original message
//       userIdToPromote = msg.reply_to_message.from.id;
//       userToPromote = msg.reply_to_message.from;
//     } else {
//       if (userIdOrUsernameToPromote.startsWith('@')) {
//         // If the identifier is a username
//         const username = userIdOrUsernameToPromote.slice(1);
//         try {
//           const chatMembers = await bot.getChatAdministrators(chatId);
//           const user = chatMembers.find(member => member.user.username === username);

//           if (user) {
//             userIdToPromote = user.user.id;
//             userToPromote = user.user;
//           } else {
//             const member = await bot.getChatMember(chatId, userIdOrUsernameToPromote);
//             userIdToPromote = member.user.id;
//             userToPromote = member.user;
//           }
//         } catch (error) {
//           bot.sendMessage(chatId, `User ${userIdOrUsernameToPromote} not found.`);
//           return;
//         }
//       } else {
//         // If the identifier is a user ID
//         userIdToPromote = parseInt(userIdOrUsernameToPromote);
//         if (isNaN(userIdToPromote)) {
//           bot.sendMessage(chatId, `Invalid user ID: ${userIdOrUsernameToPromote}`);
//           return;
//         }
//         try {
//           const member = await bot.getChatMember(chatId, userIdToPromote);
//           userToPromote = member.user;
//         } catch (error) {
//           bot.sendMessage(chatId, `User ID ${userIdOrUsernameToPromote} not found.`);
//           return;
//         }
//       }
//     }
//     // // Check if the bot itself has the necessary permission to promote a user
//     // const botUser = await bot.getChatMember(chatId, bot.id);
//     // if (!botUser.can_promote_members) {
//     //   bot.sendMessage(chatId, 'The bot needs the "can promote members" permission to promote users.');
//     //   return;
//     // }

//     // Promote the specified user with selected permissions
//     await bot.promoteChatMember(chatId, userIdToPromote, {
//       can_change_info: true,
//       can_delete_messages: true,
//       can_invite_users: true,
//       can_restrict_members: true,
//       can_pin_messages: true,
//       can_post_stories: true,
//       can_edit_stories: true,
//       can_delete_stories: true,
//       can_manage_video_chats:true,
//       can_manage_topics:true,
//       can_promote_members: false // Set as needed
//     });
//       const userFullName = userToPromote.first_name + (userToPromote.last_name ? ' ' + userToPromote.last_name : '');
//       const userUsername = userToPromote.username ? ` (@${userToPromote.username})` : '';
//       const respo = `User <a href="tg://user?id=${userIdToPromote}">${userFullName}</a> ${userUsername} has been Promoted.`;
//       bot.sendMessage(chatId, respo, { parse_mode: 'HTML' });
//     //bot.sendMessage(chatId, `User ${userIdToPromote} has been successfully promoted.`);
//   } catch (error) {
//     console.error(error);
//     bot.sendMessage(chatId, 'An error occurred while processing your request.');
//   }
// });
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
